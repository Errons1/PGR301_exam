name: "AWS ECR"

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build-and-deploy-docker-image:
    name: Push Docker image to ECR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Build Docker image
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
          rev=$(git rev-parse --short HEAD) 
          docker build . -t app
          docker tag app ${{ secrets.AWS_ECR_URL }}/candidate2024:$rev
          docker tag app ${{ secrets.AWS_ECR_URL }}/candidate2024:latest
          
      - name: Push Docker image
        if: github.ref_name == 'main'
        run: |
          rev=$(git rev-parse --short HEAD)
          docker push ${{ secrets.AWS_ECR_URL }}/candidate2024:$rev
          docker push ${{ secrets.AWS_ECR_URL }}/candidate2024:latest
          
  terraform:
    name: "Terraform"
    needs: build-and-deploy-docker-image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      IMAGE: ${{ secrets.AWS_ECR_URL }}/candidate2024:latest
      PREFIX: candidate2024
      DIR: ./infra
    
    steps: 
      - if: github.ref_name != 'main'
        run: exit 0
      
      - uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        id: init
        working-directory: ${{ env.DIR }}
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.DIR }}
        run: terraform plan -var="prefix=$PREFIX" -var="apprunner_image=$IMAGE" -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        working-directory: ${{ env.DIR }}
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ env.DIR }}
        run: terraform apply -var="prefix=$PREFIX" -var="image=$IMAGE" --auto-approve